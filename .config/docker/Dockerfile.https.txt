
# The version of the Docker file attempts to configure a Docker Container
# which exposes the web app both for http and https on ports 80 and 443
# respectively.

# Use the official Node.js image for building Angular

FROM node:lts AS build

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json for dependency installation
COPY package*.json ./

# Install Angular dependencies
RUN npm install

# Copy the application code into the container
COPY . .

# Build the Angular app using the Docker configuration. This effectively
# builds the web app in Development Mode but can be configured to build
# for Production Mode by editing the configuration in angular.json.
RUN npm run build --configuration docker

# Use Nginx (Alpine slim) to serve the built Angular app
FROM nginx:1-alpine-slim

# Copy the Self-Signed Certificate and the Private Key files
# from the ssl subdirectory to the container in the default location.
COPY ./ssl/ssl.crt /etc/nginx/ssl.crt
COPY ./ssl/ssl.key /etc/nginx/ssl.key

# Copy the custom Nginx configuration file to the container in the
# default location
COPY nginx/nginx.https.proxy.conf /etc/nginx/nginx.conf

# Copy the build output to the default Nginx folder
COPY --from=0 /app/dist/exertive-angular-laboratory /usr/share/nginx/html

# Expose ports for Angular app
EXPOSE 80 443

# Start the Nginx server
CMD ["nginx", "-g", "daemon off;"]

